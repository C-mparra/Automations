$iloIP = "10.0.14.8"         
$username = "amcadmin"      
$password = "NyNwRiSm3zRwCKQJ"     

$pair = "$username`:$password"
$encoded = [Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($pair))
$headers = @{ Authorization = "Basic $encoded" }

Add-Type @"
using System.Net;
using System.Security.Cryptography.X509Certificates;
public class TrustAllCertsPolicy : ICertificatePolicy {
    public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate, WebRequest request, int certificateProblem) {
        return true;
    }
}
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

function Write-HealthStatus {
    param (
        [string]$label,
        [string]$value
    )

    $color = switch -Regex ($value) {
        'OK' { 'Green' }
        'Warning' { 'Yellow' }
        'Critical' { 'Red' }
        'FAILED|Unreachable' { 'Red' }
        'Unknown' { 'DarkGray' }
        default { 'White' }
    }

    Write-Host ("{0,-30}: {1}" -f $label, $value) -ForegroundColor $color
}

function Get-ComponentStatus {
    param (
        [string]$uri,
        [string]$name
    )

    try {
        $res = Invoke-RestMethod -Uri "https://$iloIP$uri" -Headers $headers -Method GET -UseBasicParsing
        $status = "Unknown"

        if ($res.Status) {
            $status = if ($res.Status.HealthRollup) {
                $res.Status.HealthRollup
            } elseif ($res.Status.Health) {
                $res.Status.Health
            } else {
                "Unknown"
            }
        }

        if ($res.Members) {
            $memberStatuses = foreach ($member in $res.Members) {
                try {
                    $sub = Invoke-RestMethod -Uri "https://$iloIP$($member.'@odata.id')" -Headers $headers -Method GET -UseBasicParsing
                    if ($sub.Status.HealthRollup) {
                        $sub.Status.HealthRollup
                    } elseif ($sub.Status.Health) {
                        $sub.Status.Health
                    }
                } catch {}
            }

            if ($memberStatuses.Count -gt 0) {
                $summary = ($memberStatuses | Group-Object | ForEach-Object { "$($_.Name): $($_.Count)" }) -join ", "
                Write-HealthStatus $name $summary
            } else {
                Write-HealthStatus $name "No Health Info Found"
            }

        } elseif ($res.Redundancy) {
            $statuses = @()
            foreach ($r in $res.Redundancy) {
                $rStatus = $r.Status.Health
                $mode = $r.Mode
                $statuses += "Redundancy - $rStatus (Mode: $mode)"
            }
            $redundancySummary = ($statuses -join ", ")
            Write-HealthStatus $name $redundancySummary

        } elseif ($res.Fans) {
            $statuses = $res.Fans | Where-Object { $_.Status.Health } | ForEach-Object { $_.Status.Health }
            $summary = ($statuses | Group-Object | ForEach-Object { "$($_.Name): $($_.Count)" }) -join ", "
            Write-HealthStatus $name $summary

        } elseif ($res.Temperatures) {
            $statuses = $res.Temperatures | Where-Object { $_.Status.Health } | ForEach-Object { $_.Status.Health }
            $summary = ($statuses | Group-Object | ForEach-Object { "$($_.Name): $($_.Count)" }) -join ", "
            Write-HealthStatus $name $summary

        } elseif ($res.PowerSupplies) {
            $statuses = $res.PowerSupplies | Where-Object { $_.Status.Health } | ForEach-Object { $_.Status.Health }
            $summary = ($statuses | Group-Object | ForEach-Object { "$($_.Name): $($_.Count)" }) -join ", "
            Write-HealthStatus $name $summary

        } else {
            Write-HealthStatus $name $status
        }
    } catch {
        Write-HealthStatus $name "FAILED or Unreachable"
    }
}

function Get-FailedDrives {
    Write-Host "`n=== Physical Drives with Issues ===`n"
    try {
        $storage = Invoke-RestMethod -Uri "https://$iloIP/redfish/v1/Systems/1/SmartStorage/" -Headers $headers -Method GET -UseBasicParsing
        foreach ($controller in $storage.Members) {
            $ctrlDetail = Invoke-RestMethod -Uri "https://$iloIP$($controller.'@odata.id')" -Headers $headers -Method GET -UseBasicParsing

            foreach ($arrayCtrl in $ctrlDetail.ArrayControllers) {
                $ctrlInfo = Invoke-RestMethod -Uri "https://$iloIP$($arrayCtrl.'@odata.id')" -Headers $headers -Method GET -UseBasicParsing
                foreach ($drive in $ctrlInfo.PhysicalDrives) {
                    $driveInfo = Invoke-RestMethod -Uri "https://$iloIP$($drive.'@odata.id')" -Headers $headers -Method GET -UseBasicParsing

                    $status = if ($driveInfo.Status.HealthRollup) {
                        $driveInfo.Status.HealthRollup
                    } elseif ($driveInfo.Status.Health) {
                        $driveInfo.Status.Health
                    } else {
                        "Unknown"
                    }

                    if ($status -ne "OK") {
                        $color = switch ($status) {
                            "Warning" { "Yellow" }
                            "Critical" { "Red" }
                            default { "White" }
                        }

                        Write-Host ("Drive: {0,-20} | Model: {1,-25} | Serial: {2,-15} | Status: {3}" -f `
                            $driveInfo.Location, $driveInfo.Model, $driveInfo.SerialNumber, $status) -ForegroundColor $color
                    }
                }
            }
        }
    } catch {
        Write-Host "Failed to retrieve drive information." -ForegroundColor Red
    }
}

# === Start Asynchronous Memory Check ===
$memoryJob = Start-Job -ScriptBlock {
    param($iloIP, $headers)

    function Get-ComponentStatus {
        param ([string]$uri, [string]$name, $headers, $iloIP)

        try {
            $res = Invoke-RestMethod -Uri "https://$iloIP$uri" -Headers $headers -Method GET -UseBasicParsing
            $status = "Unknown"
            if ($res.Status) {
                $status = if ($res.Status.HealthRollup) {
                    $res.Status.HealthRollup
                } elseif ($res.Status.Health) {
                    $res.Status.Health
                } else {
                    "Unknown"
                }
            }

            Write-Host ("{0,-30}: {1}" -f $name, $status) -ForegroundColor (if ($status -eq 'OK') {'Green'} else {'Red'})
        } catch {
            Write-Host "$name FAILED or Unreachable" -ForegroundColor Red
        }
    }

    Get-ComponentStatus -uri "/redfish/v1/Systems/1/Memory/" -name "Memory" -headers $using:headers -iloIP $using:iloIP
} -ArgumentList $iloIP, $headers

Write-Host "`n=== iLO 5 Health Summary for $iloIP (Run: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')) ===`n"

Get-ComponentStatus -uri "/redfish/v1/Managers/1/"                      -name "Agentless Management Service"
Get-ComponentStatus -uri "/redfish/v1/Systems/1/"                       -name "BIOS/Hardware Health"
Get-ComponentStatus -uri "/redfish/v1/Chassis/1/Thermal/"              -name "Fan Redundancy"
Get-ComponentStatus -uri "/redfish/v1/Chassis/1/Thermal/"              -name "Fans"
Get-ComponentStatus -uri "/redfish/v1/Managers/1/EthernetInterfaces/"  -name "Network"
Get-ComponentStatus -uri "/redfish/v1/Chassis/1/Power/"                -name "Power"
Get-ComponentStatus -uri "/redfish/v1/Chassis/1/Power/"                -name "Power Supplies"
Get-ComponentStatus -uri "/redfish/v1/Systems/1/Processors/"           -name "Processors"
Get-ComponentStatus -uri "/redfish/v1/Chassis/1/"                      -name "Smart Storage Energy Pack"
Get-ComponentStatus -uri "/redfish/v1/Systems/1/SmartStorage/"         -name "Storage"
Get-ComponentStatus -uri "/redfish/v1/Chassis/1/Thermal/"              -name "Temperatures"

Get-FailedDrives

# === Wait for Memory Check (up to 60 sec) ===
$timeout = 60
$elapsed = 0
$interval = 2

while (-not $memoryJob.HasExited -and $elapsed -lt $timeout) {
    Start-Sleep -Seconds $interval
    $elapsed += $interval
}

if ($memoryJob.State -eq 'Completed') {
    Write-Host "`n=== Memory Health Summary ===`n"
    Receive-Job $memoryJob
} else {
    Write-Host "`nMemory check did not complete in time (>$timeout sec). Skipping..." -ForegroundColor Yellow
    Stop-Job $memoryJob | Out-Null
    Remove-Job $memoryJob | Out-Null
}

Write-Host "`n=== Summary complete ===`n"
