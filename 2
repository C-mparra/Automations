# Retrieve Nilear API ID from NinjaOne Document
$NilearAPIID = Ninja-Property-Docs-Get 'Automation' 'nilearapi'
if (-not $NilearAPIID) {
    Write-Output "Error: Could not retrieve Nilear API ID from NinjaOne. Exiting."
    Exit 1
}
Write-Output "Loaded Nilear API ID: $NilearAPIID"

# Define API Base URL
$BaseAPIURL = "https://api.nilear.com/os/server/json/powershellUpload/$NilearAPIID"

# System diagnostics
Write-Output "=== SYSTEM DIAGNOSTICS ==="
Write-Output "PowerShell Version: $($PSVersionTable.PSVersion)"
Write-Output "OS Version: $([System.Environment]::OSVersion.VersionString)"
Write-Output ".NET Framework Version: $([System.Runtime.InteropServices.RuntimeInformation]::FrameworkDescription)"
Write-Output "Current TLS Protocol: $([Net.ServicePointManager]::SecurityProtocol)"

# Test basic connectivity
Write-Output "Testing basic connectivity to api.nilear.com..."
try {
    $TestConnection = Test-NetConnection -ComputerName "api.nilear.com" -Port 443 -InformationLevel Quiet
    Write-Output "Port 443 connectivity: $TestConnection"
} catch {
    Write-Output "Basic connectivity test failed: $($_.Exception.Message)"
}

# Verify PowerShell Version
if ($host.version.major -lt 3) {
    Write-Warning "PowerShell needs to be at least version 3. Exiting."
    Exit 1
}

# Ensure ConnectActive EventLog source exists
if (![System.Diagnostics.EventLog]::SourceExists("ConnectActive")) {
    New-EventLog -LogName Application -Source "ConnectActive"
}
Write-EventLog -LogName Application -Source "ConnectActive" -EntryType Information -EventID 1 -Category 0 -Message "Starting ConnectActive script."

# Load Active Directory module
if (!(Get-Module ActiveDirectory)) {
    Import-Module ActiveDirectory -ErrorAction SilentlyContinue
}
if (!(Get-Module ActiveDirectory)) {
    Write-Output "Error: Failed to load Active Directory Module."
    Exit 1
}
Write-Output "Active Directory module loaded successfully."

# Enhanced TLS configuration with diagnostics
Write-Output "=== TLS CONFIGURATION ==="
Write-Output "Available Security Protocols: $([Enum]::GetNames([Net.SecurityProtocolType]) -join ', ')"

$TlsConfigs = @(
    @{ Name = "TLS 1.2 + 1.3"; Protocol = [Net.SecurityProtocolType]::Tls12 -bor 3072 }, # 3072 = Tls13 if available
    @{ Name = "TLS 1.2 Only"; Protocol = [Net.SecurityProtocolType]::Tls12 },
    @{ Name = "TLS 1.1 + 1.2"; Protocol = [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls12 }
)

function Test-SSLConnection {
    param([string]$Url)
    try {
        $Request = [System.Net.WebRequest]::Create($Url)
        $Request.Method = "HEAD"
        $Request.Timeout = 10000
        $Response = $Request.GetResponse()
        $Response.Close()
        return $true
    } catch {
        Write-Output "SSL Test Error: $($_.Exception.Message)"
        return $false
    }
}

$WorkingTlsConfig = $null
foreach ($Config in $TlsConfigs) {
    Write-Output "Testing $($Config.Name)..."
    try {
        [Net.ServicePointManager]::SecurityProtocol = $Config.Protocol
        Write-Output "Set protocol to: $([Net.ServicePointManager]::SecurityProtocol)"

        if (Test-SSLConnection -Url "https://api.nilear.com") {
            Write-Output "✓ $($Config.Name) - SSL connection successful"
            $WorkingTlsConfig = $Config
            break
        } else {
            Write-Output "✗ $($Config.Name) - SSL connection failed"
        }
    } catch {
        Write-Output "✗ $($Config.Name) - Configuration error: $($_.Exception.Message)"
    }
}

if (-not $WorkingTlsConfig) {
    Write-Output "WARNING: No TLS configuration succeeded. Proceeding with TLS 1.2..."
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
} else {
    Write-Output "Using working TLS configuration: $($WorkingTlsConfig.Name)"
}

# Function to upload data to Nilear
function Upload-ToNilear {
    param (
        [string]$DataType,
        [string]$Query
    )

    Write-Output "Retrieving ${DataType} data from Active Directory..."

    try {
        $adResults = Invoke-Expression $Query | ConvertTo-Json -Compress
        $adResults = '{"adObjects": ' + $adResults + '}'
        $URL = "$BaseAPIURL/$DataType"

        Write-Output "Attempting upload to: $URL"
        Write-Output "Data size: $($adResults.Length) bytes"
        Write-Output "Payload preview (first 500 chars): $($adResults.Substring(0, [Math]::Min($adResults.Length, 500)))"

        try {
            $Response = Invoke-RestMethod -Uri $URL -ContentType "application/json" -Method POST -Body $adResults -ErrorAction Stop
            if ($Response -eq "SUCCESS") {
                Write-Output "${DataType} data successfully uploaded to Nilear."
                Write-EventLog -LogName Application -Source "ConnectActive" -EntryType Information -EventID 5 -Category 0 -Message "${DataType} data successfully uploaded."
                return
            } else {
                Write-Output "Unexpected response: $Response"
            }
        } catch [System.Net.WebException] {
            $WebException = $_.Exception
            Write-Output "WebException Details:"
            Write-Output "  Status: $($WebException.Status)"
            Write-Output "  Message: $($WebException.Message)"
            if ($WebException.Response) {
                Write-Output "  Response Status: $($WebException.Response.StatusCode)"
                Write-Output "  Response Description: $($WebException.Response.StatusDescription)"
            }
        } catch {
            Write-Output "General Exception: $($_.Exception.Message)"
            Write-Output "Exception Type: $($_.Exception.GetType().FullName)"
        }

        Write-Output "Upload failed for ${DataType}. This appears to be a server-specific SSL/TLS or network configuration issue."
        Write-Output "Possible causes:"
        Write-Output "  - Corporate firewall blocking SSL connections"
        Write-Output "  - Proxy server configuration"
        Write-Output "  - Outdated root certificates"
        Write-Output "  - Antivirus software interference"
        Write-Output "  - Group Policy restrictions on TLS"
        Exit 1

    } catch {
        Write-Output "Error retrieving ${DataType} from Active Directory: $($_.Exception.Message)"
        Exit 1
    }
}

# Upload data sets with corrected filters
Upload-ToNilear -DataType "users" -Query "Get-ADUser -Filter 'enabled -eq `$true' -Properties *"
Upload-ToNilear -DataType "groups" -Query 'Get-ADGroup -Filter * -Properties *'
Upload-ToNilear -DataType "nodes" -Query 'Get-ADOrganizationalUnit -Filter * -Properties *'

Write-Output "ConnectActive data upload completed successfully."
Write-Output "ConnectActive script has completed."
Exit 0
